#!/bin/bash

set -e

# @TODO
export PACKAGE_NAME="kubeadm"
export PACKAGE_DIR="$ZMICRO_PACKAGES_PATH/$PACKAGE_NAME"

import "$ZMICRO_PACKAGES_PATH/$PACKAGE_NAME/config"
import "$ZMICRO_PACKAGES_PATH/$PACKAGE_NAME/core"

help() {
  echo "Usage:"
  echo "  zmicro kubeadm <master|worker> <args ...>"
  echo ""

  echo "Master:"
  echo "  zmicro kubeadm master init                - Initialize kubeadm master node"
  echo "  zmicro kubeadm master reset               - Reset kubeadm master node"
  echo "  zmicro kubeadm master create join-token   - Create join token for worker node"
  echo "  zmicro kubeadm master reinit              - Reset and Initialize kubeadm master node"
  echo ""
  echo "Worker:"
  echo "  zmicro kubeadm worker join <args ...>     - Join worker node to master node"
  echo "  zmicro kubeadm worker reset               - Reset kubeadm worker node"
  echo ""
  echo ""
  echo "Example:"
  echo "  In Master Node:"
  echo "    zmicro kubeadm master init"
  echo "    zmicro kubeadm master create join-token"
  echo ""
  echo "  In Worker Node:"
  echo "    zmicro kubeadm worker join <args ...>"
}

version() {
  kubeadm version
}

generate_config() {
  if [ -f "$PACKAGE_CORE_SERVICE_CONFIG_DIR/config.yaml" ]; then
    log::info "[$(timestamp)] kubeadm config file already exists => $PACKAGE_CORE_SERVICE_CONFIG_PATH"
    return
  fi

  if [ ! -d "$PACKAGE_CORE_SERVICE_CONFIG_DIR" ]; then
    sudo mkdir -p $PACKAGE_CORE_SERVICE_CONFIG_DIR
  fi

  if [ -z "$KUBE_API_SERVER_HOST" ]; then
    os::inquirer KUBE_API_SERVER_HOST text "Kube API Server Host" true $(net::get_ip_internal | awk '{print $1}')
  fi

  if [ -z "$KUBE_API_SERVER_PORT" ]; then
    os::inquirer KUBE_API_SERVER_PORT text "Kube API Server Port" false "6443"
  fi

  log::info "[$(timestamp)] generating kubeadm config file => $PACKAGE_CORE_SERVICE_CONFIG_PATH ..."
  local tmp_file=$(os::tmp_file)
  cat $PACKAGE_DIR/conf/config.yaml |
    sed "s|{{KUBE_VERSION}}|${PACKAGE_CORE_VERSION#v}|g" |
    sed "s|{{KUBE_API_SERVER_HOST}}|$KUBE_API_SERVER_HOST|g" |
    sed "s|{{KUBE_API_SERVER_PORT}}|$KUBE_API_SERVER_PORT|g" >$tmp_file
  sudo mv $tmp_file $PACKAGE_CORE_SERVICE_CONFIG_PATH

  log::info "[$(timestamp)] kubeadm config file generated => $PACKAGE_CORE_SERVICE_CONFIG_PATH"
  sudo cat $PACKAGE_CORE_SERVICE_CONFIG_PATH
}

generate_images() {
  log::info "[$(timestamp)] generating kubeadm images list ..."
  sudo kubeadm config images list --config ${PACKAGE_CORE_SERVICE_CONFIG_PATH}

  log::info "[$(timestamp)] kubeadm images pull ..."
  sudo kubeadm config images pull --config ${PACKAGE_CORE_SERVICE_CONFIG_PATH}
}

master_initialize() {
  log::info "[$(timestamp)] generate kubeadm config file ..."
  generate_config

  log::info "[$(timestamp)] pull images ..."
  generate_images

  log::info "[$(timestamp)] kubeadm init ..."
  sudo kubeadm init --config ${PACKAGE_CORE_SERVICE_CONFIG_PATH}
}

master_reset() {
  set +e
  # sudo kubeadm reset --config ${PACKAGE_CORE_SERVICE_CONFIG_PATH}
  sudo kubeadm reset
  set -e
}

master_create() {
  local opt=$1
  case $opt in
  join-token)
    sudo kubeadm token create --print-join-command
    ;;
  *)
    help
    ;;
  esac
}

master() {
  local opt=$1
  case $opt in
  init)
    master_initialize
    ;;
  reset)
    master_reset
    ;;
  reinit)
    master_reset
    master_initialize
    ;;
  create)
    master_create
    ;;
  *)
    help
    ;;
  esac
}

worker() {
  local opt=$1
  case $opt in
  join)
    if [ -z "$2" ]; then
      log::error "[$(timestamp)] please generate join token from master node with: zmicro kubeadm master create join-token"
      return 1
    fi

    # example: kubeadm join 10.49.168.104:6443 \
    #   --token n2ljtn.3ngyj3ldvnvvobci \
    #   --discovery-token-ca-cert-hash sha256:a8c8824063da075252a4216da9bc01c95cc7c2fac53d8d6d3ae6f5cac91923d4
    #
    sudo kubeadm join ${@:2}
    ;;
  reset)
    # sudo kubeadm reset --config ${PACKAGE_CORE_SERVICE_CONFIG_PATH}
    sudo kubeadm reset 
    ;;
  *)
    help
    ;;
  esac
}

# reference:
#   - https://blog.frognew.com/2023/12/kubeadm-install-kubernetes-1.29.html
prepare() {
  if [ "$(os::has_command containerd)" != "true" ]; then
    log::info "[$(timestamp)] containerd is not installed, installing ..."
    zmicro package install containerd
  fi

  if [ "$(os::has_command kubelet)" != "true" ]; then
    log::info "[$(timestamp)] kubelet is not installed, installing ..."
    zmicro package install kubelet
  fi

  if [ "$(os::has_command kubectl)" != "true" ]; then
    log::info "[$(timestamp)] kubectl is not installed, installing ..."
    zmicro package install kubectl
  fi

  # crictl is required for "kubeadm config images pull"
  if [ "$(os::has_command crictl)" != "true" ]; then
    log::info "[$(timestamp)] crictl is not installed, installing ..."
    zmicro package install crictl
  fi

  # reference: https://blog.csdn.net/p243679396/article/details/107416875
  # fix: [preflight] Running pre-flight checks => [WARNING FileExisting-socat]: socat not found in system path
  if [ "$(os::has_command socat)" != "true" ]; then
    pm install -y socat
  fi

  if [ "$(os::has_command conntrack)" != "true" ]; then
    # fix: [preflight] Running pre-flight checks =>  [ERROR FileExisting-conntrack]: conntrack not found in system path
    pm install -y conntrack
  fi

  # reference:
  #   - https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
  #
  if [ "$(os::has_command systemctl)" != "true" ]; then
    log::error "[$(timestamp)] cannot found systemctl command, please install systemd first."
    return 1
  fi

  # install service
  local systemd_service_dir=/etc/systemd/system
  local systemd_service_d_dir=/etc/systemd/system/kubelet.service.d
  local systemd_service_config=$systemd_service_dir/kubelet.service
  if [ ! -f "$systemd_service_config" ]; then
    if [ ! -d "$systemd_service_dir" ]; then
      sudo mkdir -p $systemd_service_dir
    fi

    log::info "[$(timestamp)][package][$name] copy kubelet.service service to $systemd_service_config ..."
    sudo cp $PACKAGE_DIR/conf/etc/systemd/system/kubelet.service $systemd_service_config && sudo cp -rf $PACKAGE_DIR/conf/etc/systemd/system/kubelet.service.d $systemd_service_d_dir
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][package][$name] failed to copy kubelet.service service to $systemd_service_config ."
      return 1
    fi

    log::info "[$(timestamp)][package][$name] reload systemd and enable kubelet service ..."
    sudo systemctl daemon-reload && sudo systemctl enable --now kubelet
    if [ "$?" != "0" ]; then
      log::error "[$(timestamp)][package][$name] failed to start containerd service with systemd."
      return 1
    fi

    log::success "[$(timestamp)][package][$name] installed service to $systemd_service_config ."
  fi
}

core() {
  # context directory
  local context="$ZMICRO_PACKAGES_DATA_PATH/kubeadm"
  if [ ! -d "$context" ]; then
    mkdir -p $context
  fi
  cd $context
  # context directory

  case $1 in
  -h | --help | help)
    help
    ;;
  -v | --version | version)
    version
    ;;
  master)
    prepare

    master ${@:2}
    ;;
  worker)
    prepare

    worker ${@:2}
    ;;
  *)
    help
    ;;
  esac
}

run() {
  core "$@"
}

run "$@"
